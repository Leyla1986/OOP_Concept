
What is Overloading in Java?

Overloading means- inside the same class has a same method name, but different  parameters.Compile time polymorphism.
                   We can overload static, final and private method in Java

Example #1: Overloading a constructor

           public class Dog {
               String breed;

               // creates a dog with the default breed
               public Dog() {
                   this.breed = "Bulldog";
               }

               // creates a dog with the specified breed
               public Dog(String breed) {
                   this.breed = breed;
               }
           }

Example #2: Overloading a method inherited from a superclass

         public class Shape {

             protected void draw() {
                 // draws the shape
             }
         }

        public class Rectangle extends Shape {

            protected void draw(int x, int y) {
                // draws the rectangle at (x, y)
            }
}

Example #3: Overloading a method by varying the number of argument

         public class SortingUtils {
             void sort(int[] numbers) {
                 // sorts the array into the default ordering
             }

             void sort(int[] numbers, int order) {
                 // sorts the array into the specified order
             }

             void sort(int[] numbers, int order, int fromIndex, int toIndex) {
                 // sorts array elements ranging from fromIndex to toIndex
                 // into the specified order
             }
         }
Example #4: Overloading in interfaces and abstract classes.
            public interface Animal {
                void eat();

                void eat(String food);

                void eat(String food, int quantity);

                void move();
            }

            public abstract class AbstractCat implements Animal {

                abstract void move(int distance);

            }

